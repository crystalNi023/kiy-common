/**
 * 2017年1月20日
 */
package com.kiy.common;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.kiy.common.Types.Kind;
import com.kiy.common.Types.Model;
import com.kiy.common.Types.Status;
import com.kiy.common.Types.Vendor;

/**
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public final class Tool {

	public static final String EMPTY = "";

	private Tool() {
	}

	public static final String getWorkPath() {
		String path = System.getProperty("user.dir");
		return path;
	}

	/**
	 * MD5 加密
	 * 
	 * @param str
	 * @return
	 */
	public static final String MD5(String str) {
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(str.getBytes());
			return new BigInteger(1, md.digest()).toString(16);
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
		// MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
		// MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
		// MD5 ("abc") = 900150983cd24fb0d6963f7d28e17f72
		// MD5 ("message digest") = f96b697d7cb7938d525a2f31aaf161d0
		// MD5 ("abcdefghijklmnopqrstuvwxyz") = c3fcd3d76192e4007dfb496cca67e13b
		// MD5 ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") =
		// f29939a25efabaef3b87e2cbfe641315
		// MD5 ("8a683566bcc7801226b3d8b0cf35fd97") =
		// cf2cb5c89c5e5eeebef4a76becddfcfd
	}

	public static final boolean isEmpty(String s) {
		if (s == null)
			return true;
		if (s.length() > 0)
			return false;
		return true;
	}

	public static final String dateFormat(Date d) {
		if (d == null)
			return EMPTY;

		DateFormat f = DateFormat.getDateTimeInstance();
		return f.format(d);
	}

	public static final String toLowerCase(Object o) {
		if (o == null)
			return EMPTY;

		return o.toString().toLowerCase();
	}
	
	public static String percent(int num,int base){
		 // 创建一个数值格式化对象  
        NumberFormat numberFormat = NumberFormat.getInstance();  
        // 设置精确到小数点后2位  
        numberFormat.setMaximumFractionDigits(2);  
		return numberFormat.format((float) num / (float) base * 100)+"%";
	}
	
	public static String getStatusString(int status){
		Status valueOf = Status.valueOf(status);
		switch (valueOf) {
			case NONE:
				return "正常";
			case OFFLINE:
				return "离线";
			case THRESHOLD:
				return "阈值告警";
			case WORK:
				return "工作异常";
			case FAULT:
				return "硬件故障";
			case BEEP:
				return "声光报警";
			case ALARM:
				return "状态报警";
			default:
				return "通讯异常";
		}
	}
	
	/**
	 * 根据厂商获取所有设备类型
	 */
	public static List<Kind> getKindsByVendor(Vendor vender) {
		List<Kind> kinds = new ArrayList<>();
		switch (vender) {
			case ELECALL:
				kinds.add(Kind.ADAPTER);
				kinds.add(Kind.POWER_METER);
				break;
			case HUABANG:
				kinds.add(Kind.ADAPTER);
				kinds.add(Kind.METER_ELECTRICITY_THREE);
				break;
			case KAISTAR:
				kinds.add(Kind.CONCENTRATOR);
				kinds.add(Kind.REPEATER);
				kinds.add(Kind.METER_ELECTRICITY_ONE);
				kinds.add(Kind.METER_ELECTRICITY_THREE);
				kinds.add(Kind.METER_GAS);
				kinds.add(Kind.METER_WATER);
				kinds.add(Kind.SENSOR_ILLUMINANCE);
				kinds.add(Kind.SENSOR_MOISTURE);
				kinds.add(Kind.SENSOR_TEMPERATURE);
				kinds.add(Kind.SENSOR_MOISTURE_TEMPERATURE);
				kinds.add(Kind.SOIL_SENSOR_MOISTURE_TEMPERATURE);
				kinds.add(Kind.SENSOR_PM);
				kinds.add(Kind.SENSOR_SMOKE);
				kinds.add(Kind.SENSOR_SWITCHING_OPEN);
				kinds.add(Kind.SENSOR_SWITCHING_OFF);
				kinds.add(Kind.CURTAIN_CONTROLLER);
				kinds.add(Kind.WINDOWS_CONTROLLER);
				kinds.add(Kind.VALVE);
				kinds.add(Kind.SWITCH);
				kinds.add(Kind.AIR_CONDITIONER);
				break;
			case LINGRUI:
				kinds.add(Kind.ADAPTER);
				kinds.add(Kind.TRANSFORMER_TEMPERATURE_CONTROLLER);
				break;
			case MUDBUS:
				kinds.add(Kind.ADAPTER);
				kinds.add(Kind.SENSOR_ILLUMINANCE);
				kinds.add(Kind.SENSOR_MOISTURE_TEMPERATURE);// 三种
				kinds.add(Kind.SOIL_SENSOR_MOISTURE_TEMPERATURE);
				kinds.add(Kind.SENSOR_METHANE);// 两种
				kinds.add(Kind.SENSOR_PM);
				kinds.add(Kind.SENSOR_POWER);
				kinds.add(Kind.SENSOR_CO);
				kinds.add(Kind.SENSOR_SMOKE);// 两种
				kinds.add(Kind.SENSOR_SWITCHING_OFF);// 两种
				kinds.add(Kind.SWITCH);
				kinds.add(Kind.AUDIBLE_VISUAL_ALARM);
				kinds.add(Kind.SENSOR_SWITCHING_OPEN);
				break;
			case RFIN:
				kinds.add(Kind.ADAPTER);
				kinds.add(Kind.SENSOR_TEMPERATURE);
				break;
			case OTHER:
				kinds.add(Kind.OTHER);
				break;
			default:
				break;
		}
		return kinds;
	}

	/**
	 * 根据厂商和设备类型获取设备型号
	 */
	public static List<Model> getModelsByVendor(Vendor vendor, Kind kind) {
		List<Model> models = new ArrayList<>();
		switch (vendor) {
			case ELECALL:
				switch (kind) {
					case ADAPTER:
						models.add(Model.NONE);
						break;
					case POWER_METER:
						models.add(Model.ELE_0001);
						break;
					default:
						break;
				}
				break;
			case HUABANG:
				switch (kind) {
					case ADAPTER:
						models.add(Model.NONE);
						break;
					case METER_ELECTRICITY_THREE:
						models.add(Model.HB_0001);
						break;
					default:
						break;
				}
				break;
			case KAISTAR:
				switch (kind) {
					case CONCENTRATOR:
						models.add(Model.KS_0001);
						break;
					case REPEATER:
						models.add(Model.KS_0002);
						break;
					case METER_ELECTRICITY_ONE:
						models.add(Model.KS_0003);
						break;
					case METER_ELECTRICITY_THREE:
						models.add(Model.KS_0004);
						break;
					case METER_GAS:
						models.add(Model.KS_0005);
						break;
					case METER_WATER:
						models.add(Model.KS_0006);
						break;
					case SENSOR_ILLUMINANCE:
						models.add(Model.KS_0007);
						break;
					case SENSOR_MOISTURE:
						models.add(Model.KS_0008);
						break;
					case SENSOR_TEMPERATURE:
						models.add(Model.KS_0009);
						break;
					case SENSOR_MOISTURE_TEMPERATURE:
						models.add(Model.KS_0010);
						break;
					case SOIL_SENSOR_MOISTURE_TEMPERATURE:
						models.add(Model.KS_0011);
						break;
					case SENSOR_PM:
						models.add(Model.KS_0012);
						break;
					case SENSOR_SMOKE:
						models.add(Model.KS_0013);
						break;
					case SENSOR_SWITCHING_OPEN:
						models.add(Model.KS_0014);
						break;
					case SENSOR_SWITCHING_OFF:
						models.add(Model.KS_0015);
						break;
					case CURTAIN_CONTROLLER:
						models.add(Model.KS_0016);
						break;
					case WINDOWS_CONTROLLER:
						models.add(Model.KS_0017);
						break;
					case VALVE:
						models.add(Model.KS_0018);
						break;
					case SWITCH:
						models.add(Model.KS_0019);
						break;
					case AIR_CONDITIONER:
						models.add(Model.KS_0020);
						break;
					default:
						break;
				}
				break;
			case LINGRUI:
				switch (kind) {
					case ADAPTER:
						models.add(Model.NONE);
						break;
					case TRANSFORMER_TEMPERATURE_CONTROLLER:
						models.add(Model.LR_0001);
						break;
					default:
						break;
				}
				break;
			case MUDBUS:
				switch (kind) {
					case ADAPTER:
						models.add(Model.NONE);
						break;
					case SENSOR_ILLUMINANCE:
						models.add(Model.MB_0001);
						break;
					case SENSOR_MOISTURE_TEMPERATURE:// 三种
						models.add(Model.MB_0002);
						models.add(Model.MB_0003);
						models.add(Model.MB_0004);
						break;
					case SOIL_SENSOR_MOISTURE_TEMPERATURE:
						models.add(Model.MB_0005);
						break;
					case SENSOR_METHANE:// 两种
						models.add(Model.MB_0006);
						models.add(Model.MB_0007);
						break;
					case SENSOR_PM:
						models.add(Model.MB_0008);
						break;
					case SENSOR_POWER:
						models.add(Model.MB_0009);
						break;
					case SENSOR_CO:
						models.add(Model.MB_0010);
						break;
					case SENSOR_SMOKE:// 两种
						models.add(Model.MB_0011);
						models.add(Model.MB_0012);
						break;
					case SENSOR_SWITCHING_OFF:// 两种
						models.add(Model.MB_0013);
						models.add(Model.MB_0017);
						break;
					case SWITCH:
						models.add(Model.MB_0014);
						break;
					case AUDIBLE_VISUAL_ALARM:
						models.add(Model.MB_0015);
						break;
					case SENSOR_SWITCHING_OPEN:
						models.add(Model.MB_0016);
						break;
					default:
						break;
				}
				break;
			case OTHER:
				models.add(Model.NONE);
				break;
			case RFIN:
				switch (kind) {
					case ADAPTER:
						models.add(Model.NONE);
						break;
					case SENSOR_TEMPERATURE:
						models.add(Model.RF_0001);
						break;
					default:
						break;
				}
				break;
			default:
				break;
		}
		return models;
	}
	
}
