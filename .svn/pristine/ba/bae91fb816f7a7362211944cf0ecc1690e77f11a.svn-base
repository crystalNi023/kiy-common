/**
 * 2017年1月12日
 */
package com.kiy.common;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.kiy.common.Types.Kind;
import com.kiy.common.Types.Link;
import com.kiy.common.Types.Model;
import com.kiy.common.Types.Status;
import com.kiy.common.Types.Use;
import com.kiy.common.Types.Vendor;
import com.kiy.common.devices.Adpater;
import com.kiy.common.devices.DHCamera;
import com.kiy.common.devices.ELCPowerMeter;
import com.kiy.common.devices.ESAirES0014;
import com.kiy.common.devices.ESCurtainES0013;
import com.kiy.common.devices.ESDimmingES0011;
import com.kiy.common.devices.ESDryContactES0008;
import com.kiy.common.devices.ESDryContactES0008_01;
import com.kiy.common.devices.ESDryContactES0008_02;
import com.kiy.common.devices.ESDryContactES0008_03;
import com.kiy.common.devices.ESDryContactES0008_04;
import com.kiy.common.devices.ESGateWayES0001;
import com.kiy.common.devices.ESGateWayES0002;
import com.kiy.common.devices.ESHumitureSensorES0009;
import com.kiy.common.devices.ESPLC2RS485HumitureSensorES0007;
import com.kiy.common.devices.ESSmartLockES0016;
import com.kiy.common.devices.ESSwitchES0004;
import com.kiy.common.devices.ESSwitchES0010;
import com.kiy.common.devices.ESSwitchFourES0003;
import com.kiy.common.devices.ESSwitchFourES0003_01;
import com.kiy.common.devices.ESSwitchFourES0003_02;
import com.kiy.common.devices.ESSwitchFourES0003_03;
import com.kiy.common.devices.ESSwitchFourES0003_04;
import com.kiy.common.devices.ESSwitchTouchTwoES0006;
import com.kiy.common.devices.ESSwitchTouchTwoES0006_01;
import com.kiy.common.devices.ESSwitchTouchTwoES0006_02;
import com.kiy.common.devices.ESSwitchTwoES0005;
import com.kiy.common.devices.ESToningES0012;
import com.kiy.common.devices.ESTvES0015;
import com.kiy.common.devices.FYSerialRadioFrequencyFY0001;
import com.kiy.common.devices.HBElectricityMeter3;
import com.kiy.common.devices.KSAir;
import com.kiy.common.devices.KSConcentrator;
import com.kiy.common.devices.KSController;
import com.kiy.common.devices.KSCurtainController;
import com.kiy.common.devices.KSElectricityMeter1;
import com.kiy.common.devices.KSElectricityMeter3;
import com.kiy.common.devices.KSGasMeter;
import com.kiy.common.devices.KSIlluminanceSensor;
import com.kiy.common.devices.KSMoistureSensor;
import com.kiy.common.devices.KSPMSensor;
import com.kiy.common.devices.KSSmokeSensor;
import com.kiy.common.devices.KSSoilMosistureTemperatureSensor;
import com.kiy.common.devices.KSSwitch;
import com.kiy.common.devices.KSSwitchingOffSensor;
import com.kiy.common.devices.KSSwitchingOpenSensor;
import com.kiy.common.devices.KSTemperatureMoistureSensor;
import com.kiy.common.devices.KSTemperatureSensor;
import com.kiy.common.devices.KSValve;
import com.kiy.common.devices.KSWaterMeter;
import com.kiy.common.devices.KSWindowController;
import com.kiy.common.devices.LRTransformerTemperature;
import com.kiy.common.devices.MudbusAudibleAndVisualAlarm;
import com.kiy.common.devices.MudbusCOSensor;
import com.kiy.common.devices.MudbusCombustibleGasSensor;
import com.kiy.common.devices.MudbusHumitureSensorMB0002;
import com.kiy.common.devices.MudbusHumitureSensorMB0003;
import com.kiy.common.devices.MudbusHumitureSensorMB0004;
import com.kiy.common.devices.MudbusIluminaceSensor;
import com.kiy.common.devices.MudbusMethaneSensorMB0006;
import com.kiy.common.devices.MudbusPMSensor;
import com.kiy.common.devices.MudbusPowerSensorMB0009;
import com.kiy.common.devices.MudbusPowerSensorMB0018;
import com.kiy.common.devices.MudbusSmokeSensorMB0011;
import com.kiy.common.devices.MudbusSmokeSensorMB0012;
import com.kiy.common.devices.MudbusSoilHumitureSensor;
import com.kiy.common.devices.MudbusSwitchMB0014;
import com.kiy.common.devices.MudbusSwitchMB0020;
import com.kiy.common.devices.MudbusSwitchingOffSensorMB0013;
import com.kiy.common.devices.MudbusSwitchingOffSensorMB0017;
import com.kiy.common.devices.MudbusSwitchingOffSensorMB0019;
import com.kiy.common.devices.MudbusSwitchingOpenSensorMB0016;
import com.kiy.common.devices.Other;
import com.kiy.common.devices.RFTemperatureSensor;

/**
 * 设备
 * 
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public abstract class Device extends Unit {

	private static final long serialVersionUID = 1L;

	// 区域 ID
	protected String zone_id;
	// 中继ID
	protected String relay_id;
	// 业主ID
	private String owner_id;
	// 设备供应商
	private Vendor vendor;
	// 设备类型
	private Kind kind;
	// 设备型号
	private Model model;
	// 设备用途
	private Use use;
	// 设备接入/连接方式
	private Link link;
	// 设备编号(通信识别)
	private String number;
	// 设备序列号(工厂识别)
	private String sn;
	// 设备负载功率(W)
	private int load;
	// 设备自身工作功率(W)
	private int power;
	// 监测相数:2/3/4
	private int check_phase;
	// 电源相数:2/3/4
	private int power_phase;
	// 安装时间
	private Date installed;
	// 生产时间
	private Date produced;
	// 设备安装的位置
	private String address;
	// 经度
	private double longitude;
	// 纬度
	private double latitude;
	// 海拔
	private float altitude;
	// 互感比
	private float mutual;
	// 延迟时间(阀门动作)
	private int delay;
	// 用户
	private String username;
	// 设备密码
	private String password;
	// 设备IP地址
	private String network_ip;
	// 设备端口
	private int network_port;
	// 设备串口号
	private String serial_port;
	// 设备串口波特率
	private int serial_baud_rate;

	// 设备状态
	private Status status;
	// 状态更新时间戳
	private transient long tick_status;
	// 设置更新时间戳
	private transient long tick_config;
	// 设备特性数组
	protected transient Feature[] features;
	// 是否关闭报警通知
	private boolean notice;
	// 是否检测设备
	private boolean detect;

	/**
	 * 
	 * @param v Vendor
	 * @param k Kind
	 * @param m Model
	 */
	protected Device(Vendor v, Kind k, Model m) {
		status = Status.NONE;
		vendor = v;
		kind = k;
		model = m;
	}

	
	/**
	 * 根据设备厂商和类型,型号创建设备实例
	 * @param v Vendor
	 * @param k Kind
	 * @param m Model
	 * @return
	 */
	public static Device instance(Vendor v, Kind k, Model m) {
		switch (v) {
			case HUABANG:
				switch (m) {
					case HB_0001:
						return new HBElectricityMeter3();
					default:
						throw new IllegalArgumentException();
				}
			case KAISTAR:
				switch (m) {
					case KS_0001:
						return new KSConcentrator();
					case KS_0002:
						return new KSController();
					case KS_0003:
						return new KSElectricityMeter1();
					case KS_0004:
						return new KSElectricityMeter3();
					case KS_0005:
						return new KSGasMeter();
					case KS_0006:
						return new KSWaterMeter();
					case KS_0007:
						return new KSIlluminanceSensor();
					case KS_0008:
						return new KSMoistureSensor();
					case KS_0009:
						return new KSTemperatureSensor();
					case KS_0010:
						return new KSTemperatureMoistureSensor();
					case KS_0011:
						return new KSSoilMosistureTemperatureSensor();
					case KS_0012:
						return new KSPMSensor();
					case KS_0013:
						return new KSSmokeSensor();
					case KS_0014:
						return new KSSwitchingOpenSensor();
					case KS_0015:
						return new KSSwitchingOffSensor();
					case KS_0016:
						return new KSCurtainController();
					case KS_0017:
						return new KSWindowController();
					case KS_0018:
						return new KSValve();
					case KS_0019:
						return new KSSwitch();
					case KS_0020:
						return new KSAir();
					default:
						throw new IllegalArgumentException();
				}
			case LINGRUI:
				if (k == Kind.ADAPTER) {
					return new Adpater(v);
				} else {
					switch (m) {
						case LR_0001:
							return new LRTransformerTemperature();
						default:
							throw new IllegalArgumentException();
					}
				}
			case ELECALL:
				if (k == Kind.ADAPTER) {
					return new Adpater(v);
				} else {
					switch (m) {
						case ELE_0001:
							return new ELCPowerMeter();
						default:
							throw new IllegalArgumentException();
					}
				}
			case RFIN:
				if (k == Kind.ADAPTER) {
					return new Adpater(v);
				} else {
					switch (m) {
						case RF_0001:
							return new RFTemperatureSensor();
						default:
							throw new IllegalArgumentException();
					}
				}
			case MUDBUS:
				if (k == Kind.ADAPTER) {
					return new Adpater(v);
				} else {
					switch (m) {
						case MB_0001:
							return new MudbusIluminaceSensor();
						case MB_0002:
							return new MudbusHumitureSensorMB0002();
						case MB_0003:
							return new MudbusHumitureSensorMB0003();
						case MB_0004:
							return new MudbusHumitureSensorMB0004();
						case MB_0005:
							return new MudbusSoilHumitureSensor();
						case MB_0006:
							return new MudbusMethaneSensorMB0006();
						case MB_0007:
							return new MudbusCombustibleGasSensor();
						case MB_0008:
							return new MudbusPMSensor();
						case MB_0009:
							return new MudbusPowerSensorMB0009();
						case MB_0010:
							return new MudbusCOSensor();
						case MB_0011:
							return new MudbusSmokeSensorMB0011();
						case MB_0012:
							return new MudbusSmokeSensorMB0012();
						case MB_0013:
							return new MudbusSwitchingOffSensorMB0013();
						case MB_0014:
							return new MudbusSwitchMB0014();
						case MB_0015:
							return new MudbusAudibleAndVisualAlarm();
						case MB_0016:
							return new MudbusSwitchingOpenSensorMB0016();
						case MB_0017:
							return new MudbusSwitchingOffSensorMB0017();
						case MB_0018:
							return new MudbusPowerSensorMB0018();
						case MB_0019:
							return new MudbusSwitchingOffSensorMB0019();
						case MB_0020:
							return new MudbusSwitchMB0020();
						default:
							throw new IllegalArgumentException();
					}
				}
			case EASTSOFT:
				switch (m) {
					case ES_0001:
						return new ESGateWayES0001();
					case ES_0002:
						return new ESGateWayES0002();
					case ES_0003:
						return new ESSwitchFourES0003();
					case ES_0003_01:
						return new ESSwitchFourES0003_01();
					case ES_0003_02:
						return new ESSwitchFourES0003_02();
					case ES_0003_03:
						return new ESSwitchFourES0003_03();
					case ES_0003_04:
						return new ESSwitchFourES0003_04();
					case ES_0004:
						return new ESSwitchES0004();
					case ES_0005:
						return new ESSwitchTwoES0005();
					case ES_0006:
						return new ESSwitchTouchTwoES0006();
					case ES_0006_01:
						return new ESSwitchTouchTwoES0006_01();
					case ES_0006_02:
						return new ESSwitchTouchTwoES0006_02();
					case ES_0007:
						return new ESPLC2RS485HumitureSensorES0007();
					case ES_0008:
						return new ESDryContactES0008();
					case ES_0008_01:
						return new ESDryContactES0008_01();
					case ES_0008_02:
						return new ESDryContactES0008_02();
					case ES_0008_03:
						return new ESDryContactES0008_03();
					case ES_0008_04:
						return new ESDryContactES0008_04();
					case ES_0009:
						return new ESHumitureSensorES0009();
					case ES_0010:
						return new ESSwitchES0010();
					case ES_0011:
						return new ESDimmingES0011();
					case ES_0012:
						return new ESToningES0012();
					case ES_0013:
						return new ESCurtainES0013();
					case ES_0014:
						return new ESAirES0014();
					case ES_0015:
						return new ESTvES0015();
					case ES_0016:
						return new ESSmartLockES0016();
					default:
						throw new IllegalArgumentException();
				}
			case OTHER:
				return new Other();
			case DAHUA:
				switch (m) {
					case DH_0001:
						return new DHCamera();
					default:
						throw new IllegalArgumentException();
				}
			case FLYING:
				switch (m) {
					case FY_0001:
						return new FYSerialRadioFrequencyFY0001();
					default:
						throw new IllegalArgumentException();
				}
			default:
				break;
		}
		throw new IllegalArgumentException();
	}

	/**
	 * 获取设备状态/告警
	 * @return 设备状态/告警
	 */
	public Status getStatus() {
		if (status == Status.NONE) {
			return getFeatureStatus();
		}
		return status;
	}

	/**
	 * 设置设备状态/告警
	 * @param value 设备状态/告警
	 */
	public void setStatus(Status value) {
		status = value;
	}

	/**
	 * 获取设备特性状态/告警
	 * @return 设备特性状态/告警
	 */
	public abstract Status getFeatureStatus();

	/**
	 * 获取设备读数
	 * @return 设备读数
	 */
	public abstract String getIndicate();
	
	/**
	 * 获取设备开关状态
	 */
	public abstract boolean getSwitchStatus();

	/**
	 * 获取所有设备特性
	 * @return 所有设备特性
	 */
	public abstract Feature[] getFeatures();

	/**
	 * 获取特性数量
	 * @return 特性数量
	 */
	public int getFeatureCount() {
		if (features == null)
			getFeatures();

		return features.length;
	}

	/**
	 * 获取指定索引的设备特性
	 * @param index 指定索引
	 * @return 设备特性
	 */
	public Feature getFeature(int index) {
		if (features == null)
			getFeatures();

		return features[index];
	}

	/**
	 * 是否属于通信适配器
	 * @return 通信适配器
	 */
	public boolean isAdpater() {
		if (kind == Kind.CONCENTRATOR||kind == Kind.ADAPTER || kind == Kind.GATEWAY) {
			return true;
		}
		return false;
	}
	
	/**
	 * 获取所有中继设备(按顺序，不包括自身)
	 * 
	 * @return List<Device> 所有中继设备(按顺序，不包括自身)
	 */
	public List<Device> getRelays() {
		List<Device> devices = new ArrayList<>();
		Device parent = getRelay();
		if (parent == null) {
			//
		} else {
			getRelays(devices, parent);
			devices.add(parent);
		}
		return devices;
	}

	// 获取中继设备的递归函数
	private void getRelays(List<Device> devices, Device d) {
		Device parent = d.getRelay();
		if (parent == null) {
			//
		} else {
			getRelays(devices, parent);
			devices.add(parent);
		}
	}

	/**
	 * 获取跟级中继设备，如果设备自身即为跟级中继设备，则返回自身实例
	 * 
	 * @return Device
	 */
	public Device getRootRelay() {
		Device parent = getRelay();
		if (parent == null) {
			return this;
		} else {
			return parent.getRootRelay();
		}
	}

	/**
	 * 获取设备所在区域ID
	 * 
	 * @return String/null
	 */
	public String getZoneId() {
		return zone_id;
	}

	/**
	 * 获取设备所在的逻辑区域
	 *
	 * @return Zone/null
	 */
	public Zone getZone() {
		if (servo == null)
			throw new ContextException();

		return servo.getZone(zone_id);
	}

	/**
	 * 设置设备所在的区域ID
	 * 
	 * @param String/null
	 */
	public void setZoneId(String value) {
		zone_id = value;
	}

	/**
	 * 获取中继ID
	 */
	public String getRelayId() {
		return relay_id;
	}

	/**
	 * 设置中继ID
	 */
	public void setRelayId(String value) {
		relay_id = value;
	}

	/**
	 * 获取上级中继设备
	 * 
	 * @return Device/null
	 */
	public Device getRelay() {
		if (servo == null)
			throw new ContextException();

		return servo.getDevice(relay_id);
	}

	/**
	 * 获取设备中继的子级
	 * 
	 * @return Set<Device> 如果没有子级设备则返回一个空集合
	 */
	public Set<Device> getRelayChildren() {
		if (servo == null)
			throw new ContextException();

		Set<Device> set = new HashSet<Device>();
		for (Device d : servo.devices.values()) {
			if (id.equals(d.relay_id))
				set.add((Device) d);
		}
		return set;
	}

	/**
	 * 获取业主ID
	 * 
	 * @return String/null
	 */
	public String getOwnerId() {
		return owner_id;
	}

	/**
	 * 设置业主IF
	 * 
	 * @param String/null
	 */
	public void setOwnerId(String value) {
		this.owner_id = value;
	}

	/**
	 * 获取设备厂商
	 * @return Vendor
	 */
	public Vendor getVendor() {
		return vendor;
	}

	/**
	 * 设置设备厂商
	 * @param value Vendor
	 */
	public void setVendor(Vendor value) {
		vendor = value;
	}

	/**
	 * 获取设备型号
	 * @return Model
	 */
	public Model getModel() {
		return model;
	}

	/**
	 * 设置设备型号
	 * @param model Model
	 */
	public void setModel(Model model) {
		this.model = model;
	}

	/**
	 * 获取设备种类
	 * @return 获取设备种类
	 */
	public Kind getKind() {
		return kind;
	}

	/**
	 * 设置设备种类
	 * @param value 设备种类
	 */
	public void setKind(Kind value) {
		kind = value;
	}

	/**
	 * 获取设备连接类型
	 * @return 设备连接类型
	 */
	public Link getLink() {
		return link;
	}

	/**
	 * 设置设备连接类型
	 * @param value 设备连接类型
	 */
	public void setLink(Link value) {
		link = value;
	}

	/**
	 * 获取设备编号(通信识别)
	 * @return 设备编号(通信识别)
	 */
	public String getNumber() {
		if (number == null)
			return Tool.EMPTY;
		return number;
	}

	/**
	 * 设置设备编号(通信识别)
	 * @param value 设备编号(通信识别)
	 */
	public void setNumber(String value) {
		number = value;
	}

	/**
	 * 获取设备序列号(工厂识别)
	 * 
	 * @return the sn
	 */
	public String getSn() {
		return sn;
	}

	/**
	 * 设置取设备序列号(工厂识别)
	 * 
	 * @param sn the sn to set
	 */
	public void setSn(String sn) {
		this.sn = sn;
	}

	/**
	 * 获取登录密码
	 * @return 登录密码
	 */
	public String getPassword() {
		if (password == null)
			return Tool.EMPTY;

		return password;
	}

	/**
	 * 设置登录密码
	 * @param value 登录密码
	 */
	public void setPassword(String value) {
		password = value;
	}

	/**
	 * 获取网络地址
	 * @return 网络地址
	 */
	public String getNetworkIp() {
		if (network_ip == null)
			return Tool.EMPTY;
		return network_ip;
	}

	/**
	 * 设置网络地址
	 * @param value 网络地址
	 */
	public void setNetworkIp(String value) {
		network_ip = value;
	}

	/**
	 * 获取网络端口
	 * @return 网络端口
	 */
	public int getNetworkPort() {
		return network_port;
	}

	/**
	 * 设置网络端口
	 * @param value 网络端口
	 */
	public void setNetworkPort(int value) {
		network_port = value;
	}

	/**
	 * 获取串口号
	 * @return 串口号
	 */
	public String getSerialPort() {
		if (serial_port == null)
			return Tool.EMPTY;
		return serial_port;
	}

	/**
	 * 设置串口号
	 * @param value 串口号（例如"COM4"）
	 */
	public void setSerialPort(String value) {
		serial_port = value;
	}

	/**
	 * 获取串口波特率
	 * @return 串口波特率
	 */
	public int getSerialBaudRate() {
		return serial_baud_rate;
	}

	/**
	 * 设置串口波特率
	 * @param value 串口波特率
	 */
	public void setSerialBaudRate(int value) {
		serial_baud_rate = value;
	}
 
	/**
	 * 获取设备安装位置
	 * @return 设备安装位置
	 */
	public String getAddress() {
		if (address == null)
			return Tool.EMPTY;
		return address;
	}

	/**
	 * 设置设备安装位置
	 * @param value 设备安装位置
	 */
	public void setAddress(String value) {
		address = value;
	}

	/**
	 * 获取设备负载功率(W)
	 * @return 设备管控的用电器的最大功率
	 */ 
	public int getLoad() {
		return load;
	}

	/**
	 * 设置设备负载功率(W)
	 * @param value 设备管控的用电器的最大功率
	 */
	public void setLoad(int value) {
		load = value;
	}

	/**
	 * 获取设备自身功率(W)
	 * @return 设备自身功率(W)
	 */
	public int getPower() {
		return power;
	}

	/**
	 * 设置设备自身功率(W)
	 * @param value 设备自身功率(W)
	 */
	public void setPower(int value) {
		power = value;
	}

	/**
	 * 获取电表互感比
	 * @return 电表互感比
	 */
	public float getMutual() {
		return mutual;
	}

	/**
	 * 设置电表互感比
	 * @param value 电表互感比
	 */
	public void setMutual(float value) {
		mutual = value;
	}

	/**
	 * 获取延迟时间
	 * @return 秒(例如阀门从全开到完全关闭所需的时间)
	 */
	public int getDelay() {
		return delay;
	}

	/**
	 * 设置延迟时间
	 * @param value 延迟时间 秒
	 */
	public void setDelay(int value) {
		delay = value;
	}

	/**
	 * 获取设备安装时间
	 * @return 设备安装时间
	 */
	public Date getInstalled() {
		return installed;
	}

	/**
	 * 设置安装时间
	 * @param value 安装时间
	 */
	public void setInstalled(Date value) {
		installed = value;
	}

	/**
	 * 获取设备生产时间
	 * @return 设备生产时间
	 */
	public Date getProduced() {
		return produced;
	}

	/**
	 * 设置设备生产时间
	 * @param value 设备生产时间
	 */
	public void setProduced(Date value) {
		produced = value;
	}

	/**
	 * 获取设备坐标经度
	 * @return 设备坐标经度
	 */
	public double getLongitude() {
		return longitude;
	}

	/**
	 * 设置设备坐标经度
	 * @param value 设备坐标经度
	 */
	public void setLongitude(double value) {
		longitude = value;
	}

	/**
	 * 获取设备坐标纬度
	 * @return 设备坐标纬度
	 */
	public double getLatitude() {
		return latitude;
	}

	/**
	 * 设置设备坐标纬度
	 * @param value 设备坐标纬度
	 */
	public void setLatitude(double value) {
		latitude = value;
	}

	/**
	 * 获取设备海拔高度
	 * @return 设备海拔高度
	 */
	public float getAltitude() {
		return altitude;
	}

	/**
	 * 设置设备海拔高度
	 * @param value 设备海拔高度
	 */
	public void setAltitude(float value) {
		altitude = value;
	}

	/**
	 * 获取监测相位数
	 * @return 监测相位数
	 */
	public int getPhaseCheck() {
		return check_phase;
	}

	/**
	 * 设置监测相位数
	 * @param value 监测相位数
	 */
	public void setPhaseCheck(int value) {
		check_phase = value;
	}

	/**
	 * 获取电源相位数
	 * @return 电源相位数
	 */
	public int getPhasePower() {
		return power_phase;
	}

	/**
	 * 设置电源相位数
	 */
	/**
	 * 设置电源相位数
	 * @param value 电源相位数
	 */
	public void setPhasePower(int value) {
		power_phase = value;
	}

	/**
	 * 获取状态更新时间戳
	 * @return 状态更新时间戳
	 */
	public long getTickStatus() {
		return tick_status;
	}

	/**
	 * 设置状态更新时间戳
	 * @param value 状态更新时间戳
	 */
	public void setTickStatus(long value) {
		tick_status = value;
	}

	/**
	 * 获取设置更新时间戳
	 * @return 设置更新时间戳
	 */
	public long getTickConfig() {
		return tick_config;
	}

	/**
	 * 设置设置更新时间戳
	 * @param value 设置更新时间戳
	 */
	public void setTickConfig(long value) {
		tick_config = value;
	}

	/**
	 * 获取用户名
	 * @return 用户名
	 */
	public String getUsername() {
		return username;
	}

	/**
	 * 设置用户名
	 * @param username 用户名
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * 获取检测的计划策略
	 * @return 检测的计划策略
	 */
	public Set<Task> getReadTasks() {
		if (servo == null)
			throw new NullPointerException();

		Set<Task> set = new HashSet<>();
		for (Task t : servo.tasks.values()) {
			if (t.getReadModel() == model && t.getReadDevices().contains(this)) {
				set.add(t);
			}
		}
		return set;
	}

	/**
	 * 获取控制的计划策略
	 * @return 控制的计划策略
	 */
	public Set<Task> getWriteTask() {
		if (servo == null)
			throw new NullPointerException();
		Set<Task> set = new HashSet<>();

		for (Task t : servo.tasks.values()) {
			if (t.getWriteModel() == model && t.getWriteDevices().contains(this)) {
				set.add(t);
			}
		}
		return set;
	}

	/**
	 * 获取设备是否需要通知报警
	 * @return true/false 
	 */
	public boolean getNotice() {
		return notice;
	}

	
	/**
	 * 设置设备是否需要通知报警
	 * @param notice true/false 
	 */
	public void setNotice(boolean notice) {
		this.notice = notice;
	}

	/**
	 * 获取设备使用用途
	 * @return 设备使用用途
	 */
	public Use getUse() {
		return use;
	}

	/**
	 * 设置设备使用用途
	 * @param use 设备使用用途
	 */
	public void setUse(Use use) {
		this.use = use;
	}

	/**
	 * 获取设备是否检测
	 * @return true/false
	 */
	public boolean getDetect() {
		return detect;
	}

	/**
	 * 设置设备是否检测
	 * @param detect true/false
	 */
	public void setDetect(boolean detect) {
		this.detect = detect;
	}

}